<?php
// $Id: feedapi_filter.module,v 1.5 2009/10/07 21:06:38 chris Exp $

/**
 * @file
 * todo write description about Feed API Filter
 */

/**
 * Implementation of hook_help().
 */
function feedapi_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#feedapi_filter':
      $output = '<p>'. t('Provides a way to set filters for nodes created by Feed API on a per feed basis.') .'</p>';
      $output .= '<p>'. t('More detailed stuff here') .'</p>'; // todo
      return $output;
    case 'admin/settings/feedapi_filter':
      return '<p>'. t('You can find more configuration options on the content type edit form of FeedAPI-enabled <a href="@content-types">content types</a>.', array('@content-types' => url('admin/content/types'))) .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function feedapi_filter_menu() {
  $items = array();

  $items['node/%node/filter'] = array(
    'title' => 'Filter',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'feedapi_filter_page',
    'page arguments' => array(1),
    'access callback' => 'feedapi_filter_access',
    'access arguments' => array(1),
  );

  $items['node/%node/filter/edit/%'] = array(
    'title' => 'Edit Filter',
    'type' => MENU_CALLBACK,
    'page callback' => 'feedapi_filter_edit',
    'page arguments' => array(1, 4),
    'access callback' => 'feedapi_filter_access',
    'access arguments' => array(1),
  );
  $items['node/%node/filter/add'] = array(
    'title' => 'Add Filter',
    'type' => MENU_CALLBACK,
    'page callback' => 'feedapi_filter_add',
    'page arguments' => array(1),
    'access callback' => 'feedapi_filter_access',
    'access arguments' => array(1),
  );

  $items['node/%node/filter/delete/%'] = array(
    'title' => 'Delete feed filter',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedapi_filter_delete'),
    'access callback' => 'feedapi_filter_access',
    'access arguments' => array(1),
  );

  $items['admin/settings/feedapi_filter'] = array(
    'title' => 'FeedAPI Filter**',
    'description' => 'Configure options for FeedAPI Filter module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedapi_filter_admin_settings'),
    'access arguments' => array('administer feedapi filter'),  // todo
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function feedapi_filter_nodeapi(&$node, $op, $teaser, $page) {
  // kludge to determine if node is used by FeedAPI, as the API doesn't help.
  $settings = variable_get('feedapi_settings_'. $node->type, FALSE);

  if (!isset($node->feedapi_node) AND !isset($settings['enabled'])) {
    return;   // this is not a Feed API node we want to process
  }

  switch ($op) {
  case 'presave':       // about to save node
    /*
     * Warning.
     * This code is fragile.  It depends on the internal data structure
     * which FeedAPI sets in the node.  The FeedAPI module could change it and
     * break this functionality at any time.  Further problem: more than one
     * feed can be associated with a feed item node.  If both feeds create
     * nodes of the same content type, AND both feeds contain the same item.
     * If that happens, the ->feed_nids array will have more than one value,
     * and we have NO way of using both, or intelligently picking the right one.
     * Instead, we always just pick the first one. Having 2 or more feeds
     * trying to set their own conflicting values in a node is crazy, anyway.
     */
    // see if any feedapi nids are associated with this node.
    if (!isset($node->feedapi_node) or !is_array($node->feedapi_node->feed_nids)) {
      return;   // this is not a node created by Feed API
    }
    // get the nid of a feed which created this node.
    $feed_nids = array_keys($node->feedapi_node->feed_nids);
    $nid = $feed_nids[0];          // pick the first feed which appears.

    $filters = _feedapi_filter_load_filters($nid);
    if (count($filters) === 0) break;   // no filters for this node

    // get the feed node info we need
    $feed_node = node_load($nid);

    $node_fields = _feedapi_filter_get_node_fields($feed_node);
    $cck_fields = _feedapi_filter_get_cck_fields($feed_node);

    // filter the fields specified in the saved filters
    foreach ($filters as $filter) {

      /* DEBUG */
      ff_debug("processing filter fid {$filter->fid} on field {$filter->field_name}");
      /* END DEBUG */

      // switch on filter type and generate the value to store in the field
      switch ($filter->type) {

      case 'default':           // set field to a default value
        /* DEBUG */
        ff_debug("setting default value '{$filter->filter}'");
        /* END DEBUG */

        $newvalue = $filter->filter;
        break;

      case 'php':               // set field to output of evaluated php snippet

/* DEBUG */
ff_debug("setting value with PHP '" . check_plain($filter->filter) ."'");
/* END DEBUG */

        // challenge #1: get the existing value in the field IF ANY.  The
        // field may NOT even exist yet in the node.
        global $fvalue;
        if (is_array($node->{$filter->field_name})) {
          // this is an EXISTING CCK field, grab the current value
          $fvalue = $node->{$filter->field_name}[0]['value'];

          /* DEBUG */
          ff_debug(" ++ CCK node->filter->field_name = <pre>". print_r($fvalue, 1). "</pre>");
          /* END DEBUG */
        }
        else if (isset($node->{$filter->field_name})) {
          // this is an EXISTING core node field, grab current value
          $fvalue = $node->{$filter->field_name};

          /* DEBUG */
          ff_debug(" ++ core node->filter->field_name = '$fvalue'");
          /* END DEBUG */
        }
        else {
          // Either node field does NOT exist, or we just don't recognize it.  
          $fvalue = ' (My Test Value) ';

        /* DEBUG */
          static $foob = FALSE;
          if (0 && !$foob) {
              ff_debug("field not yet set, node components =<pre>".print_r(array_keys((array)$node),1)."</pre>");
              $foob = TRUE;
          }
        /* END DEBUG */
        }
        $code = sprintf('<?php global $fvalue; %s; ?>', $filter->filter);
        $newvalue = drupal_eval($code);
        break;

      default:
        // this is an error; should not be any unknown types
        drupal_set_message(t("Error, unknown filter type '@f'", array('@f' => $filter->type))); // todo
      }

      // switch on the field type and store the value
      if (isset($cck_fields[$filter->field_name])) {
        // this is a CCK field, use the ugly CCK setting method:
        $node->{$filter->field_name} = array(0 => array('value' => $newvalue));  // CCK structures are so beautiful -- NOT.
      }
      else if (isset($node_fields[$filter->field_name])) {
        // this is a core node field, set it directly
        $node->{$filter->field_name} = $newvalue;
      }

      

    } // end foreach ($filters)
    break;
  } // end switch ($op)
}

/**
 * Menu callback.
 * Determine if user can set filters, on node types which can have them.
 * Primarily used as menu acess callback. @see feedapi_filter_menu().
 * 
 * @param $node
 *   String that defines a content type or node object.
 * @return 
 *   TRUE if current user can filter node fields AND
 *    content type is feed enabled.
 *   FALSE otherwise.
 */
function feedapi_filter_access($node) {
  if (user_access('administer feedapi filter')) {
    if (is_string($node)) {
      // String comes from directly from path, substitute - with _.
      $node_type = str_replace('-', '_', $node);
    }
    elseif (is_string($node->type)) {
      $node_type = $node->type;
    }
    else {
      return FALSE;
    }
    $settings = feedapi_get_settings($node_type);
    if (!empty($settings['processors']['feedapi_node']['enabled'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Menu callback.
 * Set filters for this feed's nodes.
 */
function feedapi_filter_page($node) {
  drupal_set_title(check_plain($node->title));
  // get the filters on this feed
  $filters = _feedapi_filter_load_filters($node->nid); 
  // get the fields on the feed item node, for user display purposes
  $fields = _feedapi_filter_get_field_options($node);
  $output = t('The following fields in the content created by this feed are being filtered.  The content created (nodes) may have values different from or not even present in the feed items from which other data is taken to create them.');
  $output .= drupal_get_form('feedapi_filter_form', $node, $filters, $fields);
  return $output;
}

/**
 * Filter list/add form.
 */
function feedapi_filter_form($form_state, $node, $filters, $fields) {
  if (count($filters) > 0) {
    $types = _feedapi_filter_get_types();
    foreach ($filters as $filter) {
      $form[$filter->fid]['field_name'] = array(
        '#value' => $fields[$filter->field_name],
      );
      $form[$filter->fid]['fid'] = array('#value' => $filter->fid);
      $form[$filter->fid]['type'] = array('#value' => $types[$filter->type]);
      $form[$filter->fid]['value'] = array('#value' => $filter->filter);
      $form[$filter->fid]['edit'] = array(
        '#value' => l(t('edit'), 'node/' . $node->nid . '/filter/edit/' . $filter->fid) . ' ' . l(t('delete'), 'node/' . $node->nid . '/filter/delete/' . $filter->fid),
      );
    }
  }
  else {
    $form['message'] = array('#type' => 'item', '#value' => t('There are presently no filters in use.'));
  }
  $form['add'] = array(
    '#value' => l(t('Â»  Add a new filter'), 'node/' . $node->nid . '/filter/add'),
  );
  return $form;
}

/**
 * Menu callback.
 * Edit a specific filter.
 */
function feedapi_filter_edit($node, $fid) {
  $filters = _feedapi_filter_load_filters($node->nid);  // filters for this node
  // find the filter for the specified field in $fid
  foreach ($filters as $obj) {
    if ($obj->fid == $fid) {
      $filter = $obj;
      break;
    }
  }
  if (!isset($filter->fid)) {
    watchdog('feedapi_filter', t("Filter not found for nid %nid, fid %fid", array('%nid' => $node->nid, '%fid' => $fid)));
    drupal_goto('node/' . $node->nid . '/filter');
  }

  drupal_set_title(t('Edit filter'));
  return drupal_get_form('feedapi_filter_edit_form', $node, $fid, $filter, 'edit');
}

/**
 * Menu callback.
 * Add a filter.
 */
function feedapi_filter_add($node) {
  drupal_set_title(t('Add filter'));
  $filter = new stdClass;
  $filter->field_name = FALSE;
  $filter->filter = FALSE;
  $filter->type = FALSE;
  return drupal_get_form('feedapi_filter_edit_form', $node, 0, $filter, 'add');
}

/**
 * Add / Edit Filter form.
 */
function feedapi_filter_edit_form($form_state, $node, $fid, $filter, $mode) {
  if ($mode == 'add') {
    $form['add'] = array('#type' => 'hidden', '#value' => 'add');
  }
  $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['fid'] = array('#type' => 'hidden', '#value' => $fid);
  $form['title'] = array(
    '#type' => 'item',
    '#title' => t('Feed'),
    '#value' => check_plain($node->title),
  );

  $form['field_name'] = array(
    '#type' => 'select',
    '#title' => t('Node field to filter'),
    '#options' => _feedapi_filter_get_field_options($node),
    '#default_value' => ($filter->field_name ? $filter->field_name : NULL),
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type of filter to use'),
    '#options' => _feedapi_filter_get_types(),
    '#default_value' => $filter->type,
  );
  $form['filter'] = array(
    '#type' => 'textarea',
    '#title' => t('Default value or PHP snippet text'),
    '#default_value' => $filter->filter,
    '#description' => t('Enter the literal default value, or PHP code snippet, depending on type of filter selected.  To refer to the feed field value, use variable $fvalue.'),
    // '#description' => t('Enter the literal default value, or PHP code snippet, depending on type of filter selected.  If entering PHP, include the &lt;?php and ?&gt; tags. To refer to the feed field value, use variable $fvalue.'),
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'node/' . $node->nid . '/filter'),
  );

  return $form;
}

/**
 * Form submit handler.
 */
function feedapi_filter_edit_form_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $fid = $form_state['values']['fid'];
  $field_name = $form_state['values']['field_name'];
  $type = $form_state['values']['type'];
  $filter = $form_state['values']['filter'];
  if (isset($form_state['values']['add'])) {
    // creating new filter. fid gets assigned by auto_increment.
    $result = db_query("INSERT INTO {feedapi_filter} VALUES (%d, %d, '%s', '%s', '%s')", $nid, 0, $field_name, $type, $filter);
  }
  else {
    $result = db_query("UPDATE {feedapi_filter} SET field_name = '%s', type = '%s', filter = '%s' WHERE nid = %d AND fid = %d", $field_name, $type, $filter, $nid, $fid);
  }
  if ($result !== FALSE) {
    drupal_set_message(t('Filter created.'));
  }
  else  {
    drupal_set_message(t('Database error; new filter not stored.'));
  }
  $form_state['redirect'] = "node/$nid/filter";
  return;   // redirect to list? todo
}

/**
 * Implementation of hook_perm().
 */
function feedapi_filter_perm() {
  return array('administer feedapi filter');   // todo others?
}


/**
 * Todo Settings: whatever we might need to set globally
 */
function feedapi_filter_admin_settings() {
  $form['feedapi_filter'] = array(
    '#type' => 'checkbox', '#title' => t('Set some global option here.'),
    '#filter_value' => variable_get('feedapi_filter', FALSE),
    '#description' => t('Example admin global settings checkbox.')
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function feedapi_filter_theme() {
  return array(
    'feedapi_filter_form' => array(
      'arguments' => array('form'),
    ),
  );
}

/** 
 * Menu callback; confirm deletion of a FeedAPI Filter.
 *  
 * @ingroup forms
 * @see feedapi_filter_delete_submit()
 */ 
function feedapi_filter_delete() {
  $nid = arg(1);
  $fid = arg(4);

  /* DEBUG */
  ff_debug("nid = $nid, fid = $fid");
  /* END DEBUG */

  $filter = db_fetch_object(db_query('SELECT * FROM {feedapi_filter} WHERE nid = %d AND fid = %d', $nid, $fid));
  if ($filter) {
    $form['nid'] = array('#type' => 'hidden', '#value' => $nid);
    $form['fid'] = array('#type' => 'hidden', '#value' => $fid);
    $form['field_name'] = array('#type' => 'hidden', '#value' => $filter->field_name);

    return confirm_form($form, t('Are you sure you want to delete the feed filter on field %name?', array('%name' => $filter->field_name)), 'node/' . $nid . '/filter', t('This action cannot be undone.'), t('Delete'),         t('Cancel')); 
  } 
  else {
    drupal_not_found();
  }
}

/**
 * Process filter delete form submission.
 */
function feedapi_filter_delete_submit($form, &$form_state) {
 db_query("DELETE FROM {feedapi_filter} WHERE nid = %d AND fid = %d", $form_state['values']['nid'], $form_state['values']['fid']);

 drupal_set_message(t('Deleted feed filter %name.', array('%name' =>      $form_state['values']['field_name'])));

 $form_state['redirect'] = "node/{$form_state['values']['nid']}/filter";
 return;
}

/**
 * Theming function for showing the current filters.  // todo
 */
function theme_feedapi_filter_form($form) {
  $rows = array();
  $output = '';
  foreach ($form as $name => $element) {
    if (isset($element['field_name']) && is_array($element['field_name'])) {
      $rows[] = array(
        drupal_render($element['fid']),
        drupal_render($element['field_name']),
        drupal_render($element['type']),
        // drupal_render($element['value']),
        drupal_render($element['edit']),
      );
      unset($form[$name]);
    }
  }
  if (count($rows)) {
    // $header = array('', t('Field'), t('Type'), t('Expression'), '');
    $header = array('', t('Field'), t('Filter type'), '');
    $output = theme('table', $header, $rows);
  }
  $output .= drupal_render($form);

  return $output;
}

/**
 * Retrieve filters from database.
 * @param $nid
 *  node id 
 * @return
 *  Associative array in the format
 *    array(
 *      node_field1 => array(type, expression1),
 *      node_field2 => array(type, expression2),
 *    );
 *    where type is type of filter applied, e.g. set default, computation, etc.
 */
function _feedapi_filter_load_filters($nid) {
  static $filters;
  if (isset($filters[$nid])) {
    return $filters[$nid];
  }
  if ($result = db_query('SELECT * FROM {feedapi_filter} WHERE nid = %d', $nid)) {
    while ($filter = db_fetch_object($result)) {
      $filters[$nid][] = $filter;
    }
    return $filters[$nid];
  }
  return array(array());
}

/**
 * Retrieve info about basic core node fields we can modify.
 * Returns an array of field name -> field label.
 */
function _feedapi_filter_get_node_fields() {
  return array(
    'language' => t('Language code'),
    'status' => t('Published state'),
    'promote' => t('Promoted state'),
    'moderate' => t('Moderation state'),
    'title' => t('Title'),
    'body' => t('Body'),
    'teaser' => t('Teaser'),
    'log' => t('Log message'),
  );
}

/**
 * Retrieve info about CCK node fields we can modify.
 * Returns an array of field name -> field label.
 */
function _feedapi_filter_get_cck_fields($node) {
  // figure out the content type of the feed item nodes.
  // there's some doubt that this is completely correct.  todo
  if (isset($node->feed->settings['processors']['feedapi_node']['content_type'])) {
    $settings = $node->feed->settings;
  }
  else {
    $settings = feedapi_get_settings($node->type);
  }
  $feed_item_type = $settings['processors']['feedapi_node']['content_type'];
  $info = content_types($feed_item_type);
  $fields = array();
  if (@count($info['fields'])) {
    foreach ($info['fields'] as $field_name => $field) {
      if (in_array($field['type'], array('text', 'number_integer',            'number_decimal'))) {
        $fields[$field_name] = isset($field['widget']['label']) ? $field['widget']['label'] : $field_name;
      }
    }
  }
  if (count($fields)) {
    return $fields;
  }
  return FALSE;
}

/**
 * Get node field option list for forms.
 */
function _feedapi_filter_get_field_options($node) {
  // Get fields of node type with available feed element mappers.

  // basic core node fields which we can set todo
  $node_fields = _feedapi_filter_get_node_fields();
  array_walk($node_fields, 'array_suffix', ' (node)');

  // CCK fields we can set
  $cck_fields = _feedapi_filter_get_cck_fields($node);
  array_walk($cck_fields, 'array_suffix', ' (content)');

  // Taxonomy terms we can set
  // todo taxonomy is in node->taxonomy[#]->tid|vid|name|description|weight
  // todo for each term associated with the node, # is the tid
  // todo $taxo_fields = _feedapi_filter_get_taxo_fields($feed_item_type);
  // array_walk($taxo_fields, 'array_suffix', ' (taxonomy)');

  $fields = $node_fields + $cck_fields;

  // build the node field option list
  $fields = array(t('Select a node field')) + $fields;
  // damn FAPI option list behavior!
  $fields = array_combine(array_keys($fields), $fields); 

  return $fields;
}

/**
 * Append a suffix to a string.  Intended to be called by array_walk().
 */
function array_suffix(&$item, $key, $suffix) {
  $item = $item . $suffix;
}

/**
 * Get an option list format usable by FAPI of the types of filters supported.
 */
function _feedapi_filter_get_types() {
  return array('default' => t('Set to default value'), 'php' => t('Run a PHP code snippet'));
}

/* DEBUG */
/**
 * debugging
 */
function ff_debug($msg) {
  if (FALSE) drupal_set_message($msg);
}
/* END DEBUG */
